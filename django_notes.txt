PowerShell jako administrator
~ PowerShell Community Extensions
https://wiki.mydevil.net/Python
http://www.wiki.mydevil.net/Django

umożliwiamy uruchamianie aplikacji na serwerze
devil binexec on
restart połączenia

cd .virtualenvs
virtualenv melawika_env -p /usr/local/bin/python3.5
source melawika_env/bin/activate
(deactivate)
pip install django

django-admin startproject melawika
dodanie pliku passenger_wsgi.py do korzenia projektu (przetestowanie z python)
restart aplikacji:
devil www restart melawika.pl
usuwamy pierwotny folder public_python:
rm -rf public_python
szybko zamieniamy nazwę naszego projektu na public_python:
mv melawika public_python

==================================================

pip install virtualenv
pip install virtualenvwrapper
virtualenv melawika_env

dla danej wersji py:
virtualenv my_env -p <...\bin\python.exe>

Set-ExecutionPolicy AllSigned
melawika_env\Scripts\activate
(deactivate)

pip install django

python:
import django
django.VERSION

django-admin startproject melawika_beta
cd melawika_beta
tabele bazy danych dla początkowych aplikacji:
python manage.py migrate
python manage.py runserver
wykrywa zmiany w plikach, ale nie widzi nowych plików, trzeba przeładować
synchronizacja bazy z obecnymi modelami i migracjami dla wszystkich aplikacji
python manage.py runserver 127.0.0.1:8001 --settings=mysite.settings

w produkcji uruchamiamy django jako aplikację Web Server Gateway Interface (WSGI), używając serwera web Apache, Gunicorn lub uWSGI

python manage.py startapp blog
pip install pytz
python manage.py makemigrations blog
generuje instrukcje SQL na podstawie migracji bez wykonywania ich:
python manage.py sqlmigrate blog 0001
aplikacja migracji:
python manage.py migrate

python manage.py createsuperuser

python manage.py shell

# zapytania do bazy danych za pomocą API QuerySet

from django.contrib.auth.models import User
from blog.models import Post
user = User.objects.get(username='gulci')
# bezpośrednio do bazy danych:
post = Post.objects.create(title='One more post',
                        slug='one-more-post',
                        body='Post body.',
                        author=user)
# bez create() musimy użyć save()
post = Post(title='Another post',
        slug='another-post',
        body='Another post body.',
        author=user)
post.save()

# zmiany musimy potwierdzić save()
post.title = 'Super test'
post.save()

# objects to manager modelu
all_posts = Post.objects.all()

# wykonanie nastąpi w momencie wypisania zmiennej
# może się wykonać od razu jeśli nie przypiszemy do zmiennej
Post.objects.all()

Post.objects.filter(publish__year=2016)
Post.objects.filter(author__username='gulci')
Post.objects.filter(publish__year=2016, author__username='gulci')
# można też za pomocą chainingu
Post.objects.filter(publish__year=2016).filter(author__username='gulci')

Post.objects.filter(publish__year=2016).exclude(title__startswith='Another')

Post.objects.order_by('title')
Post.objects.order_by('-title')

# usunięcie pozycji pociąga usunięcie relacji
# indeksujemy od 1
post = Post.objects.get(id=1)
post.delete()

# wykonywanie QuerySet:
# pierwsza iteracja
# slicing: Post.objects.all()[:3]
# pickle or cache
# wywołanie repr() lub len()
# wywołanie explicite list() na na QuerySet
# przy testowaniu z użyciem bool(), or, and lub if

# tworzenie managera (models.py): dodatkowa metoda Post.objects.my_manager()
# lub modyfikacja początkowego managera QuerySet Post.my_manager.all()
# będziemy używali pola Post.published

# możemy teraz filtrować używając nowego managera, czyli tutaj z tylko opublikowanych postów
Post.published.filter(title__startswith='Another')

==========

'author' z list_filter nie pojawia się na stronie
poprawiłem w modelu 'blog_posts' na 'blog_post'

==========

- projekt w IntelliJ IDEA (książka - ćwiczenia, po czym wyjście do normalnego projektu)
- repo zdalne na usłudze <-> repo lokalne, po przetestowaniu wysłanie na web z uwzględnieniem konfiguracji na serwerze

- profesjonalne rozwiązanie deploymentu - CI
- bardziej złożone rozwiązanie po dodaniu solidnej bazy danych
- przetestować Jenkinsa
- baza danych + JetBrains IDE

http://blog.gabrielsaldana.org/python-django-deployment-workflow-tools/
http://www.stefan-seelmann.de/wiki/python-deployment
http://michal.karzynski.pl/blog/2014/04/19/continuous-integration-server-for-django-using-jenkins/
